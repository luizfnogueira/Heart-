#include "jogo.h"
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <string.h>

// Definições de constantes
#define LARGURA_TELA 800
#define AREA_JOGO_X 50
#define AREA_JOGO_Y 50
#define AREA_JOGO_LARGURA 700
#define AREA_JOGO_ALTURA 500
// Velocidade do coração definida em jogo.h

// Variáveis globais do jogo
Vector2 posicaoCoracao;
float vidaCoracao = 200.0f;
float pontuacao = 0.0f;
int faseAtual = 1;
NivelDificuldade dificuldadeAtual = NORMAL;

// Variáveis locais do jogo
static bool jogadorMovendo;
static int contadorObstaculos = 0;
static float tempoJogo = 0.0f;
static bool modoChefao = false;
static int bossAtual = 0;
static float velocidadeBase = 2.5f;  // Velocidade base dos obstáculos
static float velocidadeCoracao = VELOCIDADE_CORACAO;  // Velocidade do coração

// Variáveis para o efeito visual de dano
float efeitoDanoTempo = 0.0f;  // Removed 'static' to make it accessible
float ultimoDano = 0.0f;       // Removed 'static' to make it accessible
static float vidaAnterior = 200.0f;

// Array de números de dano flutuantes
static NumeroDano numerosDano[MAX_NUMEROS_DANO];

// ... (rest of existing file)

// Implementation continues...

// Implementation of damage number functions
// Initialize damage numbers
void inicializarNumerosDano(void) {
    for (int i = 0; i < MAX_NUMEROS_DANO; i++) {
        numerosDano[i].ativo = false;
    }
}

// Add a damage number
void adicionarNumeroDano(float valor, Vector2 posicao, bool ehDano) {
    // Find an inactive slot
    for (int i = 0; i < MAX_NUMEROS_DANO; i++) {
        if (!numerosDano[i].ativo) {
            numerosDano[i].posicao = posicao;
            numerosDano[i].valor = valor;
            numerosDano[i].tempo = 1.0f;  // 1 second lifetime
            numerosDano[i].ativo = true;
            numerosDano[i].ehDano = ehDano;
            
            // Set initial velocity (moves up)
            numerosDano[i].velocidade.x = GetRandomValue(-50, 50) / 100.0f;
            numerosDano[i].velocidade.y = -2.5f;
            
            // Set color based on damage or healing
            if (ehDano) {
                numerosDano[i].cor = (Color){255, 0, 0, 255};  // Red for damage
            } else {
                numerosDano[i].cor = (Color){0, 255, 0, 255};  // Green for healing
            }
            
            break;
        }
    }
}

// Update damage numbers
void atualizarNumerosDano(void) {
    for (int i = 0; i < MAX_NUMEROS_DANO; i++) {
        if (numerosDano[i].ativo) {
            // Update position
            numerosDano[i].posicao.x += numerosDano[i].velocidade.x;
            numerosDano[i].posicao.y += numerosDano[i].velocidade.y;
            
            // Slow down movement
            numerosDano[i].velocidade.y *= 0.95f;
            
            // Update lifetime
            numerosDano[i].tempo -= GetFrameTime();
            
            // Deactivate when time runs out
            if (numerosDano[i].tempo <= 0) {
                numerosDano[i].ativo = false;
            }
        }
    }
}

// Draw damage numbers
void desenharNumerosDano(void) {
    for (int i = 0; i < MAX_NUMEROS_DANO; i++) {
        if (numerosDano[i].ativo) {
            // Calculate alpha based on remaining time
            int alpha = (int)(255 * numerosDano[i].tempo);
            if (alpha < 0) alpha = 0;
            if (alpha > 255) alpha = 255;
            
            // Set color with appropriate alpha
            Color color = numerosDano[i].cor;
            color.a = alpha;
            
            // Calculate size based on damage value and remaining time
            float size = 20.0f;
            if (numerosDano[i].valor > 30.0f) size = 30.0f; 
            if (numerosDano[i].valor > 50.0f) size = 35.0f;
            
            // Add a size pulsation effect
            float pulseFactor = 1.0f + 0.2f * sinf(GetTime() * 10.0f);
            size *= pulseFactor;
            
            // Format text based on whether it's damage or healing
            char texto[20];
            if (numerosDano[i].ehDano) {
                sprintf(texto, "-%d", (int)numerosDano[i].valor);
            } else {
                sprintf(texto, "+%d", (int)numerosDano[i].valor);
            }
            
            // Draw text shadow for better visibility
            DrawText(texto, numerosDano[i].posicao.x + 2, numerosDano[i].posicao.y + 2, size, BLACK);
            DrawText(texto, numerosDano[i].posicao.x, numerosDano[i].posicao.y, size, color);
        }
    }
}

// Finaliza o jogo e libera recursos
void finalizarJogo(void) {
    // Descarrega texturas
    UnloadTexture(texturaCoracao);
    if (faseAtual >= 2) {
        UnloadTexture(texturaBoss);
    }
}
